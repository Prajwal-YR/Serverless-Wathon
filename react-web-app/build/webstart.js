(()=>{"use strict";var e,t={277:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function s(e){try{u(r.next(e))}catch(e){a(e)}}function i(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,i)}u((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,i[0]&&(s=0)),s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.run=void 0;var s=a(n(504));if("undefined"!=typeof process){var i=process.on;process.on=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return"uncaughtException"===e[0]?void 0:i.apply(process,e)}}function u(e,t){return r(this,void 0,void 0,(function(){var n,r,a,i,u,c;return o(this,(function(o){switch(o.label){case 0:return[4,(0,s.default)()];case 1:return n=o.sent(),r=t.importObject,a=n.parseWat("test.wat",e),i=a.toBinary({}),[4,WebAssembly.instantiate(i.buffer,r)];case 2:return u=o.sent(),c=u.instance.exports.exported_func(),console.log("Memory",u.instance.exports.memory),[2,c]}}))}))}t.run=function(e,t,n){return r(this,void 0,void 0,(function(){var r,a,s,i,c,l,p,d;return o(this,(function(o){switch(o.label){case 0:return r={input:JSON.stringify({program:e}),stateMachineArn:"arn:aws:states:us-west-2:078212600544:stateMachine:Wathon"},[4,fetch("https://l07eno817e.execute-api.us-west-2.amazonaws.com/delta/execution",{method:"POST",body:JSON.stringify(r),headers:{"Content-Type":"application/json"}})];case 1:return[4,o.sent().json()];case 2:a=o.sent(),console.log("execution output",a),s={executionArn:a.executionArn},o.label=3;case 3:return[4,fetch("https://l07eno817e.execute-api.us-west-2.amazonaws.com/delta/desc",{method:"POST",body:JSON.stringify(s),headers:{"Content-Type":"application/json"}})];case 4:return[4,o.sent().json()];case 5:i=o.sent(),o.label=6;case 6:if("RUNNING"===i.status)return[3,3];o.label=7;case 7:return c=JSON.parse(i.output),console.log("Final Wasm code:\n"+c),[4,u(c,n)];case 8:return l=o.sent(),p={program:e},[4,fetch("http://ec2-52-39-168-9.us-west-2.compute.amazonaws.com:3000/",{method:"POST",body:JSON.stringify(p),headers:{"Content-Type":"application/json"}})];case 9:return[4,o.sent().text()];case 10:return[4,u(o.sent(),t)];case 11:return[2,{server:d=o.sent(),serverless:l,compare:l===d}]}}))}))}},504:e=>{e.exports=wabt}},n={};e=function e(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={exports:{}};return t[r].call(a.exports,a,a.exports,e),a.exports}(277),document.addEventListener("DOMContentLoaded",(function(){function t(e){console.log("arg in displayServer",e);var t=document.createElement("pre");document.getElementById("serverCompileOutput").appendChild(t),t.innerText=e}function n(e){console.log("arg in displayServerless",e);var t=document.createElement("pre");document.getElementById("serverlessCompileOutput").appendChild(t),t.innerText=e}var r={importObject:{imports:{print:function(e){console.log("Logging from WASM: ",e);var t=document.createElement("pre");return document.getElementById("output").appendChild(t),t.innerText=e,e},print_num:function(e){return console.log("Logging from WASM: ",e),t(String(e)),0},print_bool:function(e){return t(0===e?"False":"True"),0},print_none:function(e){return t("None"),e},abs:Math.abs,max:Math.max,min:Math.min,pow:Math.pow}}},o={importObject:{imports:{print:function(e){console.log("Logging from WASM: ",e);var t=document.createElement("pre");return document.getElementById("output").appendChild(t),t.innerText=e,e},print_num:function(e){return console.log("Logging from WASM: ",e),n(String(e)),0},print_bool:function(e){return 0===e?t("False"):n("True"),0},print_none:function(e){return n("None"),e},abs:Math.abs,max:Math.max,min:Math.min,pow:Math.pow}}};document.getElementById("run").addEventListener("click",(function(t){var n=document.getElementById("user-code");(0,e.run)(n.value,r,o).then((function(e){!function(e){if(e.server){var t=document.createElement("pre");document.getElementById("serverCompileOutput").appendChild(t),t.innerText=e.server}e.serverless&&(t=document.createElement("pre"),document.getElementById("serverlessCompileOutput").appendChild(t),t.innerText=e.serverless),document.getElementById("comparison").innerHTML="<strong> Fidelity verification: </strong>"+(e.compare?'<span style="color:green">Passed</span>':'<span style="color:red">Failed</span>')}(e),console.log("run finished")})).catch((function(e){var t,n;t=e,n=document.createElement("pre"),document.getElementById("output").appendChild(n),n.setAttribute("style","color: red"),n.innerText=String(t),console.log("run failed",e)}))}));var a=document.querySelector("textarea");a.addEventListener("keydown",(function(e){9===e.keyCode&&(e.preventDefault(),a.setRangeText("  ",a.selectionStart,a.selectionStart,"end"))}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,