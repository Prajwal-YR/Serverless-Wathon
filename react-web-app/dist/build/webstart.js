(function () {
    "use strict";
    var e, t = { 277: function (e, t, n) { var r = this && this.__awaiter || function (e, t, n, r) { return new (n || (n = Promise))((function (s, o) { function a(e) { try {
            l(r.next(e));
        }
        catch (e) {
            o(e);
        } } function i(e) { try {
            l(r.throw(e));
        }
        catch (e) {
            o(e);
        } } function l(e) { var t; e.done ? s(e.value) : (t = e.value, t instanceof n ? t : new n((function (e) { e(t); }))).then(a, i); } l((r = r.apply(e, t || [])).next()); })); }, s = this && this.__generator || function (e, t) { var n, r, s, o, a = { label: 0, sent: function () { if (1 & s[0])
                throw s[1]; return s[1]; }, trys: [], ops: [] }; return o = { next: i(0), throw: i(1), return: i(2) }, "function" == typeof Symbol && (o[Symbol.iterator] = function () { return this; }), o; function i(i) { return function (l) { return function (i) { if (n)
            throw new TypeError("Generator is already executing."); for (; o && (o = 0, i[0] && (a = 0)), a;)
            try {
                if (n = 1, r && (s = 2 & i[0] ? r.return : i[0] ? r.throw || ((s = r.return) && s.call(r), 0) : r.next) && !(s = s.call(r, i[1])).done)
                    return s;
                switch (r = 0, s && (i = [2 & i[0], s.value]), i[0]) {
                    case 0:
                    case 1:
                        s = i;
                        break;
                    case 4: return a.label++, { value: i[1], done: !1 };
                    case 5:
                        a.label++, r = i[1], i = [0];
                        continue;
                    case 7:
                        i = a.ops.pop(), a.trys.pop();
                        continue;
                    default:
                        if (!((s = (s = a.trys).length > 0 && s[s.length - 1]) || 6 !== i[0] && 2 !== i[0])) {
                            a = 0;
                            continue;
                        }
                        if (3 === i[0] && (!s || i[1] > s[0] && i[1] < s[3])) {
                            a.label = i[1];
                            break;
                        }
                        if (6 === i[0] && a.label < s[1]) {
                            a.label = s[1], s = i;
                            break;
                        }
                        if (s && a.label < s[2]) {
                            a.label = s[2], a.ops.push(i);
                            break;
                        }
                        s[2] && a.ops.pop(), a.trys.pop();
                        continue;
                }
                i = t.call(e, a);
            }
            catch (e) {
                i = [6, e], r = 0;
            }
            finally {
                n = s = 0;
            } if (5 & i[0])
            throw i[1]; return { value: i[0] ? i[1] : void 0, done: !0 }; }([i, l]); }; } }, o = this && this.__importDefault || function (e) { return e && e.__esModule ? e : { default: e }; }; Object.defineProperty(t, "__esModule", { value: !0 }), t.run = void 0; var a = o(n(504)); if ("undefined" != typeof process) {
            var i = process.on;
            process.on = function () { for (var e = [], t = 0; t < arguments.length; t++)
                e[t] = arguments[t]; return "uncaughtException" === e[0] ? void 0 : i.apply(process, e); };
        } function l(e, t) { return r(this, void 0, void 0, (function () { var n, r, o, i, l, c; return s(this, (function (s) { switch (s.label) {
            case 0: return [4, (0, a.default)()];
            case 1: return n = s.sent(), r = t.importObject, o = n.parseWat("test.wat", e), i = o.toBinary({}), [4, WebAssembly.instantiate(i.buffer, r)];
            case 2: return l = s.sent(), c = l.instance.exports.exported_func(), console.log("Memory", l.instance.exports.memory), [2, c];
        } })); })); } t.run = function (e, t, n, o) { return r(this, void 0, void 0, (function () { var r, a, i, c, u, p, d, m, v, f, h, x, y, E, g, T, w, b, C, S, O, B, I, M; return s(this, (function (s) { switch (s.label) {
            case 0: return r = { input: JSON.stringify({ program: e }), stateMachineArn: "arn:aws:states:us-west-2:078212600544:stateMachine:Wathon" }, a = Date.now(), [4, fetch("https://l07eno817e.execute-api.us-west-2.amazonaws.com/delta/execution", { method: "POST", body: JSON.stringify(r), headers: { "Content-Type": "application/json" } })];
            case 1: return i = s.sent(), c = 1, [4, i.json()];
            case 2: u = s.sent(), console.log("execution output", u), p = { executionArn: u.executionArn }, s.label = 3;
            case 3: return [4, fetch("https://l07eno817e.execute-api.us-west-2.amazonaws.com/delta/desc", { method: "POST", body: JSON.stringify(p), headers: { "Content-Type": "application/json" } })];
            case 4: return [4, s.sent().json()];
            case 5: d = s.sent(), c++, s.label = 6;
            case 6:
                if ("RUNNING" === d.status)
                    return [3, 3];
                s.label = 7;
            case 7: return m = Date.now() - a, v = 1e3 * (d.stopDate - d.startDate), f = JSON.parse(d.output), console.log("Final Wasm code:\n" + f), [4, l(f, n)];
            case 8: return h = s.sent(), x = { input: JSON.stringify({ program: e }), stateMachineArn: "arn:aws:states:us-west-2:078212600544:stateMachine:Wathon_Express" }, y = Date.now(), [4, fetch("https://l07eno817e.execute-api.us-west-2.amazonaws.com/delta/execSync", { method: "POST", body: JSON.stringify(x), headers: { "Content-Type": "application/json" } })];
            case 9: return [4, s.sent().json()];
            case 10: return E = s.sent(), g = Date.now() - y, T = 1e3 * (E.stopDate - E.startDate), [4, l(JSON.parse(E.output), o)];
            case 11: return w = s.sent(), b = { program: e }, C = Date.now(), [4, fetch("http://ec2-52-39-168-9.us-west-2.compute.amazonaws.com:3000/", { method: "POST", body: JSON.stringify(b), headers: { "Content-Type": "application/json" } })];
            case 12: return S = s.sent(), O = Date.now() - C, [4, S.json()];
            case 13: return B = s.sent(), I = 1e3 * (B.stopDate - B.startDate), [4, l(B.output, t)];
            case 14: return [2, { server: M = s.sent(), serverless: h, compareServerless: h === M, compareServerlesExp: w === M, serverlessExecTime: v, serverExecTime: I, serverRespTime: O, serverlessRespTime: m, serverlessApiCalls: c, serverlessExpOutput: w, serverlessExpExecTime: T, serverlessExpRespTime: g }];
        } })); })); }; }, 504: function (e) { e.exports = wabt; } }, n = {};
    e = function e(r) { var s = n[r]; if (void 0 !== s)
        return s.exports; var o = n[r] = { exports: {} }; return t[r].call(o.exports, o, o.exports, e), o.exports; }(277), document.addEventListener("DOMContentLoaded", (function () { function t(e, t) { console.log("arg in displayServer", e); var n = document.createElement("pre"); document.getElementById(t + "CompileOutput").appendChild(n), n.innerText = e; } function n(e) { return { importObject: { imports: { print: function (e) { console.log("Logging from WASM: ", e); var t = document.createElement("pre"); return document.getElementById("output").appendChild(t), t.innerText = e, e; }, print_num: function (n) { return console.log("Logging from WASM: ", n), t(String(n), e), 0; }, print_bool: function (n) { return t(0 === n ? "False" : "True", e), 0; }, print_none: function (n) { return t("None", e), n; }, abs: Math.abs, max: Math.max, min: Math.min, pow: Math.pow } } }; } document.getElementById("run").addEventListener("click", (function (t) { var r = document.getElementById("user-code"); (0, e.run)(r.value, n("server"), n("serverless"), n("serverlessExp")).then((function (e) { !function (e) { if (e.server) {
        var t = document.createElement("pre");
        document.getElementById("serverCompileOutput").appendChild(t), t.innerText = e.server;
    } e.serverless && (t = document.createElement("pre"), document.getElementById("serverlessCompileOutput").appendChild(t), t.innerText = e.serverless), e.serverlessExpOutput && (t = document.createElement("pre"), document.getElementById("serverlessExpCompileOutput").appendChild(t), t.innerText = e.serverlessExpOutput), document.getElementById("serverlessFidelity").innerHTML = e.compareServerless ? '<span style="color:green">Passed</span>' : '<span style="color:red">Failed</span>', document.getElementById("serverlessExpFidelity").innerHTML = e.compareServerlessExp ? '<span style="color:green">Passed</span>' : '<span style="color:red">Failed</span>', e.serverlessExecTime && (t = document.createElement("pre"), document.getElementById("serverlessCompileTime").appendChild(t), t.innerText = e.serverlessExecTime), e.serverExecTime && (t = document.createElement("pre"), document.getElementById("serverCompileTime").appendChild(t), t.innerText = e.serverExecTime), e.serverlessRespTime && (t = document.createElement("pre"), document.getElementById("serverlessRespTime").appendChild(t), t.innerText = e.serverlessRespTime), e.serverRespTime && (t = document.createElement("pre"), document.getElementById("serverRespTime").appendChild(t), t.innerText = e.serverRespTime), e.serverlessApiCalls && (t = document.createElement("pre"), document.getElementById("serverlessApiCalls").appendChild(t), t.innerText = e.serverlessApiCalls); var n = document.createElement("pre"); document.getElementById("serverApiCalls").appendChild(n), n.innerText = String(1); var r = document.createElement("pre"); document.getElementById("serverlessExpApiCalls").appendChild(r), r.innerText = String(1), e.serverlessExpExecTime && (t = document.createElement("pre"), document.getElementById("serverlessExpCompileTime").appendChild(t), t.innerText = e.serverlessExpExecTime), e.serverlessExpRespTime && (t = document.createElement("pre"), document.getElementById("serverlessExpRespTime").appendChild(t), t.innerText = e.serverlessExpRespTime); }(e), console.log("run finished"); })).catch((function (e) { var t, n; t = e, n = document.createElement("pre"), document.getElementById("output").appendChild(n), n.setAttribute("style", "color: red"), n.innerText = String(t), console.log("run failed", e); })); })); var r = document.querySelector("textarea"); r.addEventListener("keydown", (function (e) { 9 === e.keyCode && (e.preventDefault(), r.setRangeText("  ", r.selectionStart, r.selectionStart, "end")); })); }));
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U0FBU00sY0FBYyxPQUNuQ04sU0FBU08sZUFBZSxVQUFVQyxZQUFZSCxHQUM5Q0EsRUFBSTZCLGFBQWEsUUFBUyxjQUMxQjdCLEVBQUlJLFVBQVlNLE9BQU9oRixHQVdXSSxRQUFRQyxJQUFJLGFBQWNtRixFQUFHLEdBQ2pFLElBQ0EsSUFBTVksRUFBV25DLFNBQVNvQyxjQUFjLFlBRXhDRCxFQUFTbEMsaUJBQWlCLFdBQVcsU0FBQ3NCLEdBQ2xCLElBQWRBLEVBQUVjLFVBQ0pkLEVBQUVlLGlCQUVGSCxFQUFTSSxhQUNQLEtBQ0FKLEVBQVNLLGVBQ1RMLEVBQVNLLGVBQ1QsT0FHTixHQUNGLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWItYXNtLWppdC8uL3dlYnN0YXJ0LnRzIiwid2VicGFjazovL3dlYi1hc20taml0Ly4vcnVubmVyLnRzIiwid2VicGFjazovL3dlYi1hc20taml0L2V4dGVybmFsIHZhciBcIndhYnRcIiIsIndlYnBhY2s6Ly93ZWItYXNtLWppdC93ZWJwYWNrL2Jvb3RzdHJhcCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBydW4gfSBmcm9tICcuL3J1bm5lcic7XG5cblxuZnVuY3Rpb24gd2ViU3RhcnQoKSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkaXNwbGF5KGFyZzogc3RyaW5nLCBlbGVtZW50OiBzdHJpbmcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiYXJnIGluIGRpc3BsYXlTZXJ2ZXJcIiwgYXJnKVxuICAgICAgY29uc3QgZWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInByZVwiKTtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnQgKyBcIkNvbXBpbGVPdXRwdXRcIikuYXBwZW5kQ2hpbGQoZWx0KTtcbiAgICAgIGVsdC5pbm5lclRleHQgPSBhcmc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SW1wb3J0T2JqZWN0KHR5cGU6IHN0cmluZykge1xuICAgICAgdmFyIGltcG9ydE9iamVjdCA9IHtcbiAgICAgICAgaW1wb3J0czoge1xuICAgICAgICAgIHByaW50OiAoYXJnOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTG9nZ2luZyBmcm9tIFdBU006IFwiLCBhcmcpO1xuICAgICAgICAgICAgY29uc3QgZWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInByZVwiKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib3V0cHV0XCIpLmFwcGVuZENoaWxkKGVsdCk7XG4gICAgICAgICAgICBlbHQuaW5uZXJUZXh0ID0gYXJnO1xuICAgICAgICAgICAgcmV0dXJuIGFyZztcbiAgICAgICAgICB9LFxuICAgICAgICAgIHByaW50X251bTogKGFyZzogYW55KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxvZ2dpbmcgZnJvbSBXQVNNOiBcIiwgYXJnKTtcbiAgICAgICAgICAgIGRpc3BsYXkoU3RyaW5nKGFyZyksIHR5cGUpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwcmludF9ib29sOiAoYXJnOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGlmIChhcmcgPT09IDApIHsgZGlzcGxheShcIkZhbHNlXCIsIHR5cGUpOyB9XG4gICAgICAgICAgICBlbHNlIHsgZGlzcGxheShcIlRydWVcIiwgdHlwZSk7IH1cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcHJpbnRfbm9uZTogKGFyZzogYW55KSA9PiB7XG4gICAgICAgICAgICBkaXNwbGF5KFwiTm9uZVwiLCB0eXBlKTtcbiAgICAgICAgICAgIHJldHVybiBhcmc7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBhYnM6IE1hdGguYWJzLFxuICAgICAgICAgIG1heDogTWF0aC5tYXgsXG4gICAgICAgICAgbWluOiBNYXRoLm1pbixcbiAgICAgICAgICBwb3c6IE1hdGgucG93LFxuICAgICAgICB9LFxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgaW1wb3J0T2JqZWN0IH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVuZGVyUmVzdWx0KHJlc3VsdDogYW55KTogdm9pZCB7XG4gICAgICBpZiAocmVzdWx0LnNlcnZlcikge1xuICAgICAgICBjb25zdCBlbHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicHJlXCIpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlcnZlckNvbXBpbGVPdXRwdXRcIikuYXBwZW5kQ2hpbGQoZWx0KTtcbiAgICAgICAgZWx0LmlubmVyVGV4dCA9IHJlc3VsdC5zZXJ2ZXI7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0LnNlcnZlcmxlc3MpIHtcbiAgICAgICAgY29uc3QgZWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInByZVwiKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZXJ2ZXJsZXNzQ29tcGlsZU91dHB1dFwiKS5hcHBlbmRDaGlsZChlbHQpO1xuICAgICAgICBlbHQuaW5uZXJUZXh0ID0gcmVzdWx0LnNlcnZlcmxlc3M7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0LnNlcnZlcmxlc3NFeHBPdXRwdXQpIHtcbiAgICAgICAgY29uc3QgZWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInByZVwiKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZXJ2ZXJsZXNzRXhwQ29tcGlsZU91dHB1dFwiKS5hcHBlbmRDaGlsZChlbHQpO1xuICAgICAgICBlbHQuaW5uZXJUZXh0ID0gcmVzdWx0LnNlcnZlcmxlc3NFeHBPdXRwdXQ7XG4gICAgICB9XG4gICAgICBjb25zdCBzZXJ2ZXJsZXNzRmlkZWxpdHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlcnZlcmxlc3NGaWRlbGl0eVwiKTtcbiAgICAgIHNlcnZlcmxlc3NGaWRlbGl0eS5pbm5lckhUTUwgPSByZXN1bHQuY29tcGFyZVNlcnZlcmxlc3MgPyBgPHNwYW4gc3R5bGU9XCJjb2xvcjpncmVlblwiPlBhc3NlZDwvc3Bhbj5gIDogYDxzcGFuIHN0eWxlPVwiY29sb3I6cmVkXCI+RmFpbGVkPC9zcGFuPmA7XG4gICAgICBjb25zdCBzZXJ2ZXJsZXNzRXhwRmlkZWxpdHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlcnZlcmxlc3NFeHBGaWRlbGl0eVwiKTtcbiAgICAgIHNlcnZlcmxlc3NFeHBGaWRlbGl0eS5pbm5lckhUTUwgPSByZXN1bHQuY29tcGFyZVNlcnZlcmxlc3NFeHAgPyBgPHNwYW4gc3R5bGU9XCJjb2xvcjpncmVlblwiPlBhc3NlZDwvc3Bhbj5gIDogYDxzcGFuIHN0eWxlPVwiY29sb3I6cmVkXCI+RmFpbGVkPC9zcGFuPmA7XG4gICAgICBpZiAocmVzdWx0LnNlcnZlcmxlc3NFeGVjVGltZSkge1xuICAgICAgICBjb25zdCBlbHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicHJlXCIpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlcnZlcmxlc3NDb21waWxlVGltZVwiKS5hcHBlbmRDaGlsZChlbHQpO1xuICAgICAgICBlbHQuaW5uZXJUZXh0ID0gcmVzdWx0LnNlcnZlcmxlc3NFeGVjVGltZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQuc2VydmVyRXhlY1RpbWUpIHtcbiAgICAgICAgY29uc3QgZWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInByZVwiKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZXJ2ZXJDb21waWxlVGltZVwiKS5hcHBlbmRDaGlsZChlbHQpO1xuICAgICAgICBlbHQuaW5uZXJUZXh0ID0gcmVzdWx0LnNlcnZlckV4ZWNUaW1lO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5zZXJ2ZXJsZXNzUmVzcFRpbWUpIHtcbiAgICAgICAgY29uc3QgZWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInByZVwiKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZXJ2ZXJsZXNzUmVzcFRpbWVcIikuYXBwZW5kQ2hpbGQoZWx0KTtcbiAgICAgICAgZWx0LmlubmVyVGV4dCA9IHJlc3VsdC5zZXJ2ZXJsZXNzUmVzcFRpbWU7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0LnNlcnZlclJlc3BUaW1lKSB7XG4gICAgICAgIGNvbnN0IGVsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwcmVcIik7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VydmVyUmVzcFRpbWVcIikuYXBwZW5kQ2hpbGQoZWx0KTtcbiAgICAgICAgZWx0LmlubmVyVGV4dCA9IHJlc3VsdC5zZXJ2ZXJSZXNwVGltZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQuc2VydmVybGVzc0FwaUNhbGxzKSB7XG4gICAgICAgIGNvbnN0IGVsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwcmVcIik7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VydmVybGVzc0FwaUNhbGxzXCIpLmFwcGVuZENoaWxkKGVsdCk7XG4gICAgICAgIGVsdC5pbm5lclRleHQgPSByZXN1bHQuc2VydmVybGVzc0FwaUNhbGxzO1xuICAgICAgfVxuICAgICAgY29uc3QgZWx0MSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwcmVcIik7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlcnZlckFwaUNhbGxzXCIpLmFwcGVuZENoaWxkKGVsdDEpO1xuICAgICAgZWx0MS5pbm5lclRleHQgPSBTdHJpbmcoMSk7XG4gICAgICBjb25zdCBlbHQyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInByZVwiKTtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VydmVybGVzc0V4cEFwaUNhbGxzXCIpLmFwcGVuZENoaWxkKGVsdDIpO1xuICAgICAgZWx0Mi5pbm5lclRleHQgPSBTdHJpbmcoMSk7XG4gICAgICBpZiAocmVzdWx0LnNlcnZlcmxlc3NFeHBFeGVjVGltZSkge1xuICAgICAgICBjb25zdCBlbHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicHJlXCIpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlcnZlcmxlc3NFeHBDb21waWxlVGltZVwiKS5hcHBlbmRDaGlsZChlbHQpO1xuICAgICAgICBlbHQuaW5uZXJUZXh0ID0gcmVzdWx0LnNlcnZlcmxlc3NFeHBFeGVjVGltZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQuc2VydmVybGVzc0V4cFJlc3BUaW1lKSB7XG4gICAgICAgIGNvbnN0IGVsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwcmVcIik7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VydmVybGVzc0V4cFJlc3BUaW1lXCIpLmFwcGVuZENoaWxkKGVsdCk7XG4gICAgICAgIGVsdC5pbm5lclRleHQgPSByZXN1bHQuc2VydmVybGVzc0V4cFJlc3BUaW1lO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlckVycm9yKHJlc3VsdDogYW55KTogdm9pZCB7XG4gICAgICBjb25zdCBlbHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicHJlXCIpO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvdXRwdXRcIikuYXBwZW5kQ2hpbGQoZWx0KTtcbiAgICAgIGVsdC5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBcImNvbG9yOiByZWRcIik7XG4gICAgICBlbHQuaW5uZXJUZXh0ID0gU3RyaW5nKHJlc3VsdCk7XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJydW5cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBjb25zdCBzb3VyY2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVzZXItY29kZVwiKSBhcyBIVE1MVGV4dEFyZWFFbGVtZW50O1xuICAgICAgcnVuKFxuICAgICAgICBzb3VyY2UudmFsdWUsXG4gICAgICAgIGdldEltcG9ydE9iamVjdChcInNlcnZlclwiKSxcbiAgICAgICAgZ2V0SW1wb3J0T2JqZWN0KFwic2VydmVybGVzc1wiKSxcbiAgICAgICAgZ2V0SW1wb3J0T2JqZWN0KFwic2VydmVybGVzc0V4cFwiKVxuICAgICAgKS50aGVuKChyKSA9PiB7IHJlbmRlclJlc3VsdChyKTsgY29uc29sZS5sb2coXCJydW4gZmluaXNoZWRcIikgfSlcbiAgICAgICAgLmNhdGNoKChlKSA9PiB7IHJlbmRlckVycm9yKGUpOyBjb25zb2xlLmxvZyhcInJ1biBmYWlsZWRcIiwgZSkgfSk7O1xuICAgIH0pO1xuICAgIGNvbnN0IHRleHRhcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInRleHRhcmVhXCIpO1xuXG4gICAgdGV4dGFyZWEuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgKGUpID0+IHtcbiAgICAgIGlmIChlLmtleUNvZGUgPT09IDkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIHRleHRhcmVhLnNldFJhbmdlVGV4dChcbiAgICAgICAgICBcIiAgXCIsXG4gICAgICAgICAgdGV4dGFyZWEuc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgICAgdGV4dGFyZWEuc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgICAgXCJlbmRcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxud2ViU3RhcnQoKTtcbiIsIi8vIFRoaXMgaXMgYSBtYXNodXAgb2YgdHV0b3JpYWxzIGZyb206XG4vL1xuLy8gLSBodHRwczovL2dpdGh1Yi5jb20vQXNzZW1ibHlTY3JpcHQvd2FidC5qcy9cbi8vIC0gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWJBc3NlbWJseS9Vc2luZ190aGVfSmF2YVNjcmlwdF9BUElcblxuLy8gaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB3YWJ0IGZyb20gJ3dhYnQnO1xuXG4vLyBOT1RFKGpvZSk6IFRoaXMgaXMgYSBoYWNrIHRvIGdldCB0aGUgQ0xJIFJlcGwgdG8gcnVuLiBXQUJUIHJlZ2lzdGVycyBhIGdsb2JhbFxuLy8gdW5jYXVnaHQgZXhuIGhhbmRsZXIsIGFuZCB0aGlzIGlzIG5vdCBhbGxvd2VkIHdoZW4gcnVubmluZyB0aGUgUkVQTFxuLy8gKGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvcmVwbC5odG1sI3JlcGxfZ2xvYmFsX3VuY2F1Z2h0X2V4Y2VwdGlvbnMpLiBObyByZWFzb25cbi8vIGlzIGdpdmVuIGZvciB0aGlzIGluIHRoZSBkb2NzIHBhZ2UsIGFuZCBJIGhhdmVuJ3Qgc3BlbnQgdGltZSBvbiB0aGUgZG9tYWluXG4vLyBtb2R1bGUgdG8gZmlndXJlIG91dCB3aGF0J3MgZ29pbmcgb24gaGVyZS4gSXQgZG9lc24ndCBzZWVtIGNyaXRpY2FsIGZvciBXQUJUXG4vLyB0byBoYXZlIHRoaXMgc3VwcG9ydCwgc28gd2UgcGF0Y2ggaXQgYXdheS5cbmlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBjb25zdCBvbGRQcm9jZXNzT24gPSBwcm9jZXNzLm9uO1xuICBwcm9jZXNzLm9uID0gKC4uLmFyZ3M6IGFueSk6IGFueSA9PiB7XG4gICAgaWYgKGFyZ3NbMF0gPT09IFwidW5jYXVnaHRFeGNlcHRpb25cIikgeyByZXR1cm47IH1cbiAgICBlbHNlIHsgcmV0dXJuIG9sZFByb2Nlc3NPbi5hcHBseShwcm9jZXNzLCBhcmdzKTsgfVxuICB9O1xufVxuXG5hc3luYyBmdW5jdGlvbiBleGVjV2FzbSh3YXNtU291cmNlOiBzdHJpbmcsIGNvbmZpZzogYW55KSB7XG4gIGNvbnN0IHdhYnRJbnRlcmZhY2UgPSBhd2FpdCB3YWJ0KCk7XG4gIGNvbnN0IGltcG9ydE9iamVjdCA9IGNvbmZpZy5pbXBvcnRPYmplY3Q7XG4gIGNvbnN0IG15TW9kdWxlID0gd2FidEludGVyZmFjZS5wYXJzZVdhdChcInRlc3Qud2F0XCIsIHdhc21Tb3VyY2UpO1xuICB2YXIgYXNCaW5hcnkgPSBteU1vZHVsZS50b0JpbmFyeSh7fSk7XG4gIHZhciB3YXNtTW9kdWxlID0gYXdhaXQgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoYXNCaW5hcnkuYnVmZmVyLCBpbXBvcnRPYmplY3QpO1xuICBjb25zdCByZXN1bHQgPSAod2FzbU1vZHVsZS5pbnN0YW5jZS5leHBvcnRzLmV4cG9ydGVkX2Z1bmMgYXMgYW55KSgpO1xuICBjb25zb2xlLmxvZyhcIk1lbW9yeVwiLCB3YXNtTW9kdWxlLmluc3RhbmNlLmV4cG9ydHMubWVtb3J5KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1bihzb3VyY2U6IHN0cmluZywgc2VydmVyQ29uZmlnOiBhbnksIHNlcnZlcmxlc3NDb25maWc6IGFueSwgc2VydmVybGVzc0V4cENvbmZpZzogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgLy8gU2VydmVybGVzc1xuICBjb25zdCBleGVjSW5wdXQgPSB7XG4gICAgaW5wdXQ6IEpTT04uc3RyaW5naWZ5KHsgcHJvZ3JhbTogc291cmNlIH0pLFxuICAgIHN0YXRlTWFjaGluZUFybjogXCJhcm46YXdzOnN0YXRlczp1cy13ZXN0LTI6MDc4MjEyNjAwNTQ0OnN0YXRlTWFjaGluZTpXYXRob25cIlxuICB9XG4gIGNvbnN0IHNlcnZlcmxlc3NSZXNwU3RhcnQgPSBEYXRlLm5vdygpO1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL2wwN2VubzgxN2UuZXhlY3V0ZS1hcGkudXMtd2VzdC0yLmFtYXpvbmF3cy5jb20vZGVsdGEvZXhlY3V0aW9uJywge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGV4ZWNJbnB1dCksXG4gICAgaGVhZGVyczoge1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH1cbiAgfSk7XG4gIHZhciBzZXJ2ZXJsZXNzQXBpQ2FsbHM6bnVtYmVyID0gMTtcbiAgY29uc3Qgc2VydmVybGVzc1Jlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgY29uc29sZS5sb2coXCJleGVjdXRpb24gb3V0cHV0XCIsIHNlcnZlcmxlc3NSZXN1bHQpO1xuICBjb25zdCBkZXRhaWxzSW5wdXQgPSB7XG4gICAgZXhlY3V0aW9uQXJuOiBzZXJ2ZXJsZXNzUmVzdWx0LmV4ZWN1dGlvbkFyblxuICB9XG4gIHZhciBleGVjRGV0YWlsc1Jlc3VsdDtcbiAgZG8ge1xuICAgIGNvbnN0IGV4ZWNEZXRhaWxzID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vbDA3ZW5vODE3ZS5leGVjdXRlLWFwaS51cy13ZXN0LTIuYW1hem9uYXdzLmNvbS9kZWx0YS9kZXNjJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkZXRhaWxzSW5wdXQpLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICB9XG4gICAgfSk7XG4gICAgZXhlY0RldGFpbHNSZXN1bHQgPSBhd2FpdCBleGVjRGV0YWlscy5qc29uKCk7XG4gICAgc2VydmVybGVzc0FwaUNhbGxzKys7XG4gIH0gd2hpbGUgKGV4ZWNEZXRhaWxzUmVzdWx0LnN0YXR1cyA9PT0gXCJSVU5OSU5HXCIpO1xuICBjb25zdCBzZXJ2ZXJsZXNzUmVzcFRpbWUgPSBEYXRlLm5vdygpLXNlcnZlcmxlc3NSZXNwU3RhcnQ7XG4gIGNvbnN0IHNlcnZlcmxlc3NFeGVjVGltZSA9IChleGVjRGV0YWlsc1Jlc3VsdC5zdG9wRGF0ZSAtIGV4ZWNEZXRhaWxzUmVzdWx0LnN0YXJ0RGF0ZSkgKiAxMDAwO1xuICBjb25zdCB3YXNtU291cmNlOiBzdHJpbmcgPSBKU09OLnBhcnNlKGV4ZWNEZXRhaWxzUmVzdWx0Lm91dHB1dCk7XG4gIGNvbnNvbGUubG9nKFwiRmluYWwgV2FzbSBjb2RlOlxcblwiICsgd2FzbVNvdXJjZSk7XG4gIGNvbnN0IHNlcnZlcmxlc3NPdXRwdXQgPSBhd2FpdCBleGVjV2FzbSh3YXNtU291cmNlLCBzZXJ2ZXJsZXNzQ29uZmlnKTtcbiAgLy8gRXhwcmVzcyBTZXJ2ZXJsZXNzIFxuICBjb25zdCBleGVjRXhwSW5wdXQgPSB7XG4gICAgaW5wdXQ6IEpTT04uc3RyaW5naWZ5KHsgcHJvZ3JhbTogc291cmNlIH0pLFxuICAgIHN0YXRlTWFjaGluZUFybjogXCJhcm46YXdzOnN0YXRlczp1cy13ZXN0LTI6MDc4MjEyNjAwNTQ0OnN0YXRlTWFjaGluZTpXYXRob25fRXhwcmVzc1wiXG4gIH1cbiAgY29uc3Qgc2VydmVybGVzc0V4cFJlc3BTdGFydCA9IERhdGUubm93KCk7XG4gIGNvbnN0IHJlc3BvbnNlRXhwID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vbDA3ZW5vODE3ZS5leGVjdXRlLWFwaS51cy13ZXN0LTIuYW1hem9uYXdzLmNvbS9kZWx0YS9leGVjU3luYycsIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShleGVjRXhwSW5wdXQpLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICB9XG4gIH0pO1xuICBjb25zdCBzZXJ2ZXJsZXNzRXhwUmVzdWx0ID0gYXdhaXQgcmVzcG9uc2VFeHAuanNvbigpO1xuICBjb25zdCBzZXJ2ZXJsZXNzRXhwUmVzcFRpbWUgPSBEYXRlLm5vdygpLXNlcnZlcmxlc3NFeHBSZXNwU3RhcnQ7XG4gIGNvbnN0IHNlcnZlcmxlc3NFeHBFeGVjVGltZSA9IChzZXJ2ZXJsZXNzRXhwUmVzdWx0LnN0b3BEYXRlIC0gc2VydmVybGVzc0V4cFJlc3VsdC5zdGFydERhdGUpICogMTAwMDtcbiAgY29uc3Qgc2VydmVybGVzc0V4cE91dHB1dCA9IGF3YWl0IGV4ZWNXYXNtKEpTT04ucGFyc2Uoc2VydmVybGVzc0V4cFJlc3VsdC5vdXRwdXQpLCBzZXJ2ZXJsZXNzRXhwQ29uZmlnKTtcbiAgLy8gU2VydmVyXG4gIGNvbnN0IHNlcnZlcklucHV0ID0ge1xuICAgIHByb2dyYW06IHNvdXJjZVxuICB9XG4gIGNvbnN0IHNlcnZlclJlc3BTdGFydCA9IERhdGUubm93KCk7XG4gIGNvbnN0IHNlcnZlclJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHA6Ly9lYzItNTItMzktMTY4LTkudXMtd2VzdC0yLmNvbXB1dGUuYW1hem9uYXdzLmNvbTozMDAwLycsIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShzZXJ2ZXJJbnB1dCksXG4gICAgaGVhZGVyczoge1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHNlcnZlclJlc3BUaW1lID0gRGF0ZS5ub3coKS1zZXJ2ZXJSZXNwU3RhcnQ7XG4gIGNvbnN0IHNlcnZlclJlc3VsdCA9IGF3YWl0IHNlcnZlclJlc3BvbnNlLmpzb24oKTtcbiAgY29uc3Qgc2VydmVyRXhlY1RpbWUgPSAoc2VydmVyUmVzdWx0LnN0b3BEYXRlIC0gc2VydmVyUmVzdWx0LnN0YXJ0RGF0ZSkgKiAxMDAwO1xuICBjb25zdCBzZXJ2ZXJPdXRwdXQgPSBhd2FpdCBleGVjV2FzbShzZXJ2ZXJSZXN1bHQub3V0cHV0LCBzZXJ2ZXJDb25maWcpO1xuICAvLyBSZXR1cm4gdmFsdWVzXG4gIHJldHVybiB7XG4gICAgc2VydmVyOiBzZXJ2ZXJPdXRwdXQsXG4gICAgc2VydmVybGVzczogc2VydmVybGVzc091dHB1dCxcbiAgICBjb21wYXJlU2VydmVybGVzczogc2VydmVybGVzc091dHB1dCA9PT0gc2VydmVyT3V0cHV0LFxuICAgIGNvbXBhcmVTZXJ2ZXJsZXNFeHA6IHNlcnZlcmxlc3NFeHBPdXRwdXQgPT09IHNlcnZlck91dHB1dCxcbiAgICBzZXJ2ZXJsZXNzRXhlY1RpbWUsXG4gICAgc2VydmVyRXhlY1RpbWUsXG4gICAgc2VydmVyUmVzcFRpbWUsXG4gICAgc2VydmVybGVzc1Jlc3BUaW1lLFxuICAgIHNlcnZlcmxlc3NBcGlDYWxscyxcbiAgICBzZXJ2ZXJsZXNzRXhwT3V0cHV0LFxuICAgIHNlcnZlcmxlc3NFeHBFeGVjVGltZSxcbiAgICBzZXJ2ZXJsZXNzRXhwUmVzcFRpbWVcbiAgfTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gd2FidDsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJvbiIsImFyZ3MiLCJhcHBseSIsImV4ZWNXYXNtIiwid2FzbVNvdXJjZSIsImNvbmZpZyIsIndhYnRJbnRlcmZhY2UiLCJpbXBvcnRPYmplY3QiLCJteU1vZHVsZSIsInBhcnNlV2F0IiwiYXNCaW5hcnkiLCJ0b0JpbmFyeSIsIldlYkFzc2VtYmx5IiwiaW5zdGFudGlhdGUiLCJidWZmZXIiLCJ3YXNtTW9kdWxlIiwicmVzdWx0IiwiaW5zdGFuY2UiLCJleHBvcnRzIiwiZXhwb3J0ZWRfZnVuYyIsImNvbnNvbGUiLCJsb2ciLCJtZW1vcnkiLCJzb3VyY2UiLCJzZXJ2ZXJDb25maWciLCJzZXJ2ZXJsZXNzQ29uZmlnIiwic2VydmVybGVzc0V4cENvbmZpZyIsImV4ZWNJbnB1dCIsImlucHV0IiwiSlNPTiIsInN0cmluZ2lmeSIsInByb2dyYW0iLCJzdGF0ZU1hY2hpbmVBcm4iLCJzZXJ2ZXJsZXNzUmVzcFN0YXJ0IiwiRGF0ZSIsIm5vdyIsImZldGNoIiwibWV0aG9kIiwiYm9keSIsImhlYWRlcnMiLCJyZXNwb25zZSIsInNlcnZlcmxlc3NBcGlDYWxscyIsImpzb24iLCJzZXJ2ZXJsZXNzUmVzdWx0IiwiZGV0YWlsc0lucHV0IiwiZXhlY3V0aW9uQXJuIiwiZXhlY0RldGFpbHNSZXN1bHQiLCJzdGF0dXMiLCJzZXJ2ZXJsZXNzUmVzcFRpbWUiLCJzZXJ2ZXJsZXNzRXhlY1RpbWUiLCJzdG9wRGF0ZSIsInN0YXJ0RGF0ZSIsInBhcnNlIiwib3V0cHV0Iiwic2VydmVybGVzc091dHB1dCIsImV4ZWNFeHBJbnB1dCIsInNlcnZlcmxlc3NFeHBSZXNwU3RhcnQiLCJzZXJ2ZXJsZXNzRXhwUmVzdWx0Iiwic2VydmVybGVzc0V4cFJlc3BUaW1lIiwic2VydmVybGVzc0V4cEV4ZWNUaW1lIiwic2VydmVybGVzc0V4cE91dHB1dCIsInNlcnZlcklucHV0Iiwic2VydmVyUmVzcFN0YXJ0Iiwic2VydmVyUmVzcG9uc2UiLCJzZXJ2ZXJSZXNwVGltZSIsInNlcnZlclJlc3VsdCIsInNlcnZlckV4ZWNUaW1lIiwic2VydmVyIiwic2VydmVyT3V0cHV0Iiwic2VydmVybGVzcyIsImNvbXBhcmVTZXJ2ZXJsZXNzIiwiY29tcGFyZVNlcnZlcmxlc0V4cCIsIm1vZHVsZSIsIndhYnQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImRpc3BsYXkiLCJhcmciLCJlbGVtZW50IiwiZWx0IiwiY3JlYXRlRWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwiYXBwZW5kQ2hpbGQiLCJpbm5lclRleHQiLCJnZXRJbXBvcnRPYmplY3QiLCJ0eXBlIiwiaW1wb3J0cyIsInByaW50IiwicHJpbnRfbnVtIiwiU3RyaW5nIiwicHJpbnRfYm9vbCIsInByaW50X25vbmUiLCJhYnMiLCJNYXRoIiwibWF4IiwibWluIiwicG93IiwiZSIsInJ1biIsInZhbHVlIiwidGhlbiIsInIiLCJpbm5lckhUTUwiLCJjb21wYXJlU2VydmVybGVzc0V4cCIsImVsdDEiLCJlbHQyIiwicmVuZGVyUmVzdWx0IiwiY2F0Y2giLCJzZXRBdHRyaWJ1dGUiLCJ0ZXh0YXJlYSIsInF1ZXJ5U2VsZWN0b3IiLCJrZXlDb2RlIiwicHJldmVudERlZmF1bHQiLCJzZXRSYW5nZVRleHQiLCJzZWxlY3Rpb25TdGFydCJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceMappingURL=webstart.js.map